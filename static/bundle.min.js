/*! Copyright 2018 discordboats.club. All rights reserved. */
!function(e){function o(o){for(var t,s,i=o[0],c=o[1],l=o[2],f=0,p=[];f<i.length;f++)s=i[f],n[s]&&p.push(n[s][0]),n[s]=0;for(t in c)Object.prototype.hasOwnProperty.call(c,t)&&(e[t]=c[t]);for(u&&u(o);p.length;)p.shift()();return a.push.apply(a,l||[]),r()}function r(){for(var e,o=0;o<a.length;o++){for(var r=a[o],t=!0,i=1;i<r.length;i++){var c=r[i];0!==n[c]&&(t=!1)}t&&(a.splice(o--,1),e=s(s.s=r[0]))}return e}var t={},n={1:0},a=[];function s(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,o,r){s.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:r})},s.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},s.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(o,"a",o),o},s.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},s.p="";var i=window.webpackJsonp=window.webpackJsonp||[],c=i.push.bind(i);i.push=o,i=i.slice();for(var l=0;l<i.length;l++)o(i[l]);var u=c;a.push([6,0]),r()}([,function(e,o,r){e.exports=r.p+"style.css"},,,function(e,o){e.exports=class{async getMe(){if(this._me)return this._me;const e=await fetch("/api/me",{credentials:"same-origin"}),o=await e.json();if(o.error)throw new Error(o.error);return this._me=o,o}async logOut(){await fetch("/api/logout",{credentials:"same-origin",method:"POST"})}async createBot(e){const o=await fetch("/api/bot",{method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"},credentials:"same-origin"}),r=await o.json();if(r.error)throw new Error(r.error);if(r.ok)return{ok:r.ok};throw new Error("Bad response")}}},function(e,o,r){const t=r(4),n=r(0),a=r(3);new t,console.log("Welcome to discordboats.club! Why are you looking here? :P"),console.log("%cðŸš« Warning! ðŸš«","color: red; font-weight: bold; font-size: x-large"),console.log("%cTyping anything here could make bad stuff happen!","color: #e91e63; font-size: large"),n(window).ready(async()=>{document.location.href.includes("/dashboard/new")&&(a.FormSelect.init(n("select#newbot"),{classes:"newbot-dd-wrap"}),n("form").submit(async e=>{e.preventDefault();let o=a.FormSelect.getInstance(n("select")).getSelectedValues()[0];"none"===o&&(o=void 0),console.log(e)}))})},function(e,o,r){r(5),e.exports=r(1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,